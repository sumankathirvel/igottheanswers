{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Desktop\\\\quora-clone-master\\\\src\\\\components\\\\Post.js\",\n    _s = $RefreshSig$();\n\nimport { Avatar } from \"@material-ui/core\";\nimport React, { useEffect, useState } from \"react\";\nimport \"./Post.css\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectUser } from \"../features/userSlice\";\nimport Modal from \"react-modal\";\nimport db from \"../firebase\";\nimport { selectQuestionId, setQuestionInfo } from \"../features/questionSlice\";\nimport firebase from \"firebase\";\n\nfunction Post({\n  Id,\n  question,\n  imageUrl,\n  timestamp,\n  users\n}) {\n  _s();\n\n  const user = useSelector(selectUser);\n  const dispatch = useDispatch();\n  const [IsmodalOpen, setIsModalOpen] = useState(false);\n  const questionId = useSelector(selectQuestionId);\n  const [answer, setAnswer] = useState(\"\");\n  const [getAnswers, setGetAnswers] = useState([]);\n  useEffect(() => {\n    if (questionId) {\n      db.collection(\"questions\").doc(questionId).collection(\"answer\").orderBy(\"timestamp\", \"desc\").onSnapshot(snapshot => setGetAnswers(snapshot.docs.map(doc => ({\n        id: doc.id,\n        answers: doc.data()\n      }))));\n    }\n  }, [questionId]);\n\n  const handleAnswer = e => {\n    e.preventDefault();\n\n    if (questionId) {\n      db.collection(\"questions\").doc(questionId).collection(\"answer\").add({\n        user: user,\n        answer: answer,\n        questionId: questionId,\n        timestamp: firebase.firestore.FieldValue.serverTimestamp()\n      });\n    }\n\n    console.log(questionId);\n    setAnswer(\"\");\n    setIsModalOpen(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"post\",\n    onClick: () => dispatch(setQuestionInfo({\n      questionId: Id,\n      questionName: question\n    })),\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"post__info\",\n      children: [/*#__PURE__*/_jsxDEV(Avatar, {\n        src: users.photo ? users.photo : \"https://images-platform.99static.com//_QXV_u2KU7-ihGjWZVHQb5d-yVM=/238x1326:821x1909/fit-in/500x500/99designs-contests-attachments/119/119362/attachment_119362573\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: users.displayName ? users.displayName : users.email\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n        children: new Date(timestamp === null || timestamp === void 0 ? void 0 : timestamp.toDate()).toLocaleString()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"post__body\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post__question\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: question\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setIsModalOpen(true),\n          className: \"post__btnAnswer\",\n          children: \"Answer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Modal, {\n          isOpen: IsmodalOpen,\n          onRequestClose: () => setIsModalOpen(false),\n          shouldCloseOnOverlayClick: false,\n          style: {\n            overlay: {\n              width: 680,\n              height: 550,\n              backgroundColor: \"rgba(0,0,0,0.8)\",\n              zIndex: \"1000\",\n              top: \"50%\",\n              left: \"50%\",\n              marginTop: \"-250px\",\n              marginLeft: \"-350px\"\n            }\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"modal__question\",\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              children: question\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"asked by\", \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"name\",\n                children: users.displayName ? users.displayName : users.email\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 102,\n                columnNumber: 17\n              }, this), \" \", \"\", \"on\", \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"name\",\n                children: new Date(timestamp === null || timestamp === void 0 ? void 0 : timestamp.toDate()).toLocaleString()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 107,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"modal__answer\",\n            children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n              value: answer,\n              onChange: e => setAnswer(e.target.value),\n              placeholder: \"Enter Your Answer\",\n              type: \"text\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"modal__button\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"cancle\",\n              onClick: () => setIsModalOpen(false),\n              children: \"Cancel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"sumbit\",\n              onClick: handleAnswer,\n              className: \"add\",\n              children: \"Add Answer\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post__answer\",\n        children: getAnswers.map(({\n          id,\n          answers\n        }) => {\n          var _answers$timestamp;\n\n          return /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              position: \"relative\",\n              paddingBottom: \"5px\"\n            },\n            children: Id === answers.questionId ? /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [answers.answer, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 136,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                style: {\n                  position: \"absolute\",\n                  color: \"gray\",\n                  fontSize: \"small\",\n                  display: \"flex\",\n                  right: \"0px\"\n                },\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  style: {\n                    color: \"#b92b27\"\n                  },\n                  children: [answers.user.displayName ? answers.user.displayName : answers.user.email, \" \", \"on\", \" \", new Date((_answers$timestamp = answers.timestamp) === null || _answers$timestamp === void 0 ? void 0 : _answers$timestamp.toDate()).toLocaleString()]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 146,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 137,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 17\n            }, this) : \"\"\n          }, id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 13\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: imageUrl,\n        alt: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Post, \"asDARKA0kRXNf2npepspLYlBk5I=\", false, function () {\n  return [useSelector, useDispatch, useSelector];\n});\n\n_c = Post;\nexport default Post;\n\nvar _c;\n\n$RefreshReg$(_c, \"Post\");","map":{"version":3,"sources":["C:/Users/DELL/Desktop/quora-clone-master/src/components/Post.js"],"names":["Avatar","React","useEffect","useState","useDispatch","useSelector","selectUser","Modal","db","selectQuestionId","setQuestionInfo","firebase","Post","Id","question","imageUrl","timestamp","users","user","dispatch","IsmodalOpen","setIsModalOpen","questionId","answer","setAnswer","getAnswers","setGetAnswers","collection","doc","orderBy","onSnapshot","snapshot","docs","map","id","answers","data","handleAnswer","e","preventDefault","add","firestore","FieldValue","serverTimestamp","console","log","questionName","photo","displayName","email","Date","toDate","toLocaleString","overlay","width","height","backgroundColor","zIndex","top","left","marginTop","marginLeft","target","value","position","paddingBottom","color","fontSize","display","right"],"mappings":"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","sourcesContent":["import { Avatar } from \"@material-ui/core\";\nimport React, { useEffect, useState } from \"react\";\nimport \"./Post.css\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectUser } from \"../features/userSlice\";\nimport Modal from \"react-modal\";\nimport db from \"../firebase\";\nimport { selectQuestionId, setQuestionInfo } from \"../features/questionSlice\";\nimport firebase from \"firebase\";\n\nfunction Post({ Id, question, imageUrl, timestamp, users }) {\n  const user = useSelector(selectUser);\n  const dispatch = useDispatch();\n\n  const [IsmodalOpen, setIsModalOpen] = useState(false);\n  const questionId = useSelector(selectQuestionId);\n  const [answer, setAnswer] = useState(\"\");\n  const [getAnswers, setGetAnswers] = useState([]);\n\n  useEffect(() => {\n    if (questionId) {\n      db.collection(\"questions\")\n        .doc(questionId)\n        .collection(\"answer\")\n        .orderBy(\"timestamp\", \"desc\")\n        .onSnapshot((snapshot) =>\n          setGetAnswers(\n            snapshot.docs.map((doc) => ({ id: doc.id, answers: doc.data() }))\n          )\n        );\n    }\n  }, [questionId]);\n\n  const handleAnswer = (e) => {\n    e.preventDefault();\n\n    if (questionId) {\n      db.collection(\"questions\").doc(questionId).collection(\"answer\").add({\n        user: user,\n        answer: answer,\n        questionId: questionId,\n        timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n      });\n    }\n    console.log(questionId);\n    setAnswer(\"\");\n    setIsModalOpen(false);\n  };\n  return (\n    <div\n      className=\"post\"\n      onClick={() =>\n        dispatch(\n          setQuestionInfo({\n            questionId: Id,\n            questionName: question,\n          })\n        )\n      }\n    >\n      <div className=\"post__info\">\n        <Avatar\n          src={\n            users.photo\n              ? users.photo\n              : \"https://images-platform.99static.com//_QXV_u2KU7-ihGjWZVHQb5d-yVM=/238x1326:821x1909/fit-in/500x500/99designs-contests-attachments/119/119362/attachment_119362573\"\n          }\n        />\n        <h4>{users.displayName ? users.displayName : users.email}</h4>\n        <small>{new Date(timestamp?.toDate()).toLocaleString()}</small>\n      </div>\n      <div className=\"post__body\">\n        <div className=\"post__question\">\n          <p>{question}</p>\n          <button\n            onClick={() => setIsModalOpen(true)}\n            className=\"post__btnAnswer\"\n          >\n            Answer\n          </button>\n          <Modal\n            isOpen={IsmodalOpen}\n            onRequestClose={() => setIsModalOpen(false)}\n            shouldCloseOnOverlayClick={false}\n            style={{\n              overlay: {\n                width: 680,\n                height: 550,\n                backgroundColor: \"rgba(0,0,0,0.8)\",\n                zIndex: \"1000\",\n                top: \"50%\",\n                left: \"50%\",\n                marginTop: \"-250px\",\n                marginLeft: \"-350px\",\n              },\n            }}\n          >\n            <div className=\"modal__question\">\n              <h1>{question}</h1>\n              <p>\n                asked by{\" \"}\n                <span className=\"name\">\n                  {users.displayName ? users.displayName : users.email}\n                </span>{\" \"}\n                {\"\"}\n                on{\" \"}\n                <span className=\"name\">\n                  {new Date(timestamp?.toDate()).toLocaleString()}\n                </span>\n              </p>\n            </div>\n            <div className=\"modal__answer\">\n              <textarea\n                value={answer}\n                onChange={(e) => setAnswer(e.target.value)}\n                placeholder=\"Enter Your Answer\"\n                type=\"text\"\n              />\n            </div>\n            <div className=\"modal__button\">\n              <button className=\"cancle\" onClick={() => setIsModalOpen(false)}>\n                Cancel\n              </button>\n              <button type=\"sumbit\" onClick={handleAnswer} className=\"add\">\n                Add Answer\n              </button>\n            </div>\n          </Modal>\n        </div>\n        <div className=\"post__answer\">\n          {getAnswers.map(({ id, answers }) => (\n            <p key={id} style={{ position: \"relative\", paddingBottom: \"5px\" }}>\n              {Id === answers.questionId ? (\n                <span>\n                  {answers.answer}\n                  <br />\n                  <span\n                    style={{\n                      position: \"absolute\",\n                      color: \"gray\",\n                      fontSize: \"small\",\n                      display: \"flex\",\n                      right: \"0px\",\n                    }}\n                  >\n                    <span style={{ color: \"#b92b27\" }}>\n                      {answers.user.displayName\n                        ? answers.user.displayName\n                        : answers.user.email}{\" \"}\n                      on{\" \"}\n                      {new Date(answers.timestamp?.toDate()).toLocaleString()}\n                    </span>\n                  </span>\n                </span>\n              ) : (\n                \"\"\n              )}\n            </p>\n          ))}\n        </div>\n        <img src={imageUrl} alt=\"\" />\n      </div>\n     \n    </div>\n  );\n}\n\nexport default Post;\n"]},"metadata":{},"sourceType":"module"}